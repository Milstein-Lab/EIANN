Wrote profile results to forward_speedtest.py.lprof
Timer unit: 1e-06 s

Total time: 11.2293 s
File: forward_speedtest.py
Function: forward at line 48

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                           @profile
    49                                           def forward(self, dataloader, store_history=False, store_dynamics=False, no_grad=True):
    50     60000    2657874.0     44.3     23.7      for idx, data, target in dataloader:
    51     60000     250211.0      4.2      2.2          sample = data.squeeze(0).to(device)
    52     60000      41531.0      0.7      0.4          if len(sample.shape) > 1:
    53                                                       batch_size = sample.shape[0]
    54                                                   else:
    55     60000       8794.0      0.1      0.1              batch_size = 1
    56    180000      96969.0      0.5      0.9          for i, layer in enumerate(self):
    57    120000      20731.0      0.2      0.2              if i == 0:
    58     60000      65192.0      1.1      0.6                  input_pop = next(iter(layer))
    59    180000      94340.0      0.5      0.8              for pop in layer:
    60    180000    1231131.0      6.8     11.0                  pop.reinit(self.device, batch_size=batch_size)
    61     60000     179318.0      3.0      1.6          input_pop.activity = torch.squeeze(sample)
    62                                           
    63     60000      46674.0      0.8      0.4          for t in range(self.forward_steps):
    64     60000      23861.0      0.4      0.2              if (t >= self.forward_steps - self.backward_steps) and not no_grad:
    65                                                           track_grad = True
    66                                                       else:
    67     60000       8200.0      0.1      0.1                  track_grad = False
    68     60000      88915.0      1.5      0.8              with torch.set_grad_enabled(track_grad):
    69    180000      69000.0      0.4      0.6                  for post_layer in self:
    70    180000      86812.0      0.5      0.8                      for post_pop in post_layer:
    71    180000     153972.0      0.9      1.4                          post_pop.prev_activity = post_pop.activity
    72    180000      88721.0      0.5      0.8                  for i, post_layer in enumerate(self):
    73    180000     102135.0      0.6      0.9                      for post_pop in post_layer:
    74    120000      23320.0      0.2      0.2                          if i > 0:
    75    120000      90153.0      0.8      0.8                              for projection in post_pop:
    76    120000      26857.0      0.2      0.2                                  pre_pop = projection.pre
    77    120000      26217.0      0.2      0.2                                  if projection.update_phase in ['forward', 'all', 'F', 'A']:
    78    120000      26156.0      0.2      0.2                                      if projection.direction in ['forward', 'F']:
    79    120000    3224228.0     26.9     28.7                                          delta_state = projection(pre_pop.activity)
    80                                                                               elif projection.direction in ['recurrent', 'R']:
    81                                                                                   delta_state = projection(pre_pop.prev_activity)
    82    120000    2026028.0     16.9     18.0                              post_pop.state = post_pop.state + (-post_pop.state + post_pop.bias + delta_state) / post_pop.tau
    83    120000     432371.0      3.6      3.9                              post_pop.activity = post_pop.activation(post_pop.state)
    84    180000      32355.0      0.2      0.3                          if store_dynamics:
    85                                                                       post_pop.forward_steps_activity.append(post_pop.activity.detach().clone())
    86                                           
    87     60000       7262.0      0.1      0.1          if store_history:
    88                                                       for layer in self:
    89                                                           for pop in layer:
    90                                                               pop.activity_history_list.append(pop.forward_steps_activity)

